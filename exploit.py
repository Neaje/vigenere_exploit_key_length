def read_file(filename):
    try:
        with open(filename, 'r') as file:
            content = file.read()
        return content
    except FileNotFoundError:
        print(f"Le fichier {filename} n'a pas été trouvé.")
        return None

def vigenere_encrypt(plaintext, key):
    ciphertext = ""
    key_length = len(key)
    
    for i, char in enumerate(plaintext):
        if char.isalpha():
            shift = ord(key[i % key_length].lower()) - ord('a')
            cipher_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))
            ciphertext += cipher_char.upper() 
        else:
            ciphertext += char

    return ciphertext

def vigenere_decrypt(ciphertext, key):
    plaintext = ""
    key_length = len(key)
    
    for i, char in enumerate(ciphertext):
        if char.isalpha():
            shift = ord(key[i % key_length].lower()) - ord('a')
            plain_char = chr((ord(char.lower()) - ord('a') - shift) % 26 + ord('a'))
            plaintext += plain_char.lower()
        else:
            plaintext += char

    return plaintext

english_freq = {
    'e': 11.1607 / 100, 'a': 8.4966 / 100, 'r': 7.5809 / 100, 
    'i': 7.5448 / 100, 'o': 7.1635 / 100, 't': 6.9509 / 100, 
    'n': 6.6544 / 100, 's': 5.7351 / 100, 'l': 5.4893 / 100, 
    'c': 4.5388 / 100, 'u': 3.6308 / 100, 'd': 3.3844 / 100, 
    'p': 3.1671 / 100, 'm': 3.0129 / 100, 'h': 3.0034 / 100, 
    'g': 2.4705 / 100, 'b': 2.0720 / 100, 'f': 1.8121 / 100, 
    'y': 1.7779 / 100, 'w': 1.2899 / 100, 'k': 1.1016 / 100, 
    'v': 1.0074 / 100, 'x': 0.2902 / 100, 'z': 0.2722 / 100, 
    'j': 0.1965 / 100, 'q': 0.1962 / 100
}

def calculate_frequency(text):
    total = len(text)
    return {char: text.count(char) / total for char in english_freq.keys() if char in text}

def calculate_shift(text):
    best_shift = 0
    best_score = float('inf')

    for shift in range(26):
        decrypted = ''.join([chr((ord(char) - ord('a') - shift) % 26 + ord('a')) for char in text.lower() if char.isalpha()])
        freqs = calculate_frequency(decrypted)
        
        score = sum([abs(freqs.get(char, 0) - english_freq[char]) for char in english_freq.keys()])


        if score < best_score:
            best_score = score
            best_shift = shift

    return best_shift

def exploit(ciphertext, key_length):
    subtexts = ['' for _ in range(key_length)]
    for i, char in enumerate(ciphertext):
        if char.lower() in english_freq.keys():
            subtexts[i % key_length] += char

    estimated_key = ''
    for subtext in subtexts:
        shift = calculate_shift(subtext)
        estimated_key += chr(shift + ord('a'))

    return estimated_key

# Test
key_length = 5
ciphertext = read_file("vigenere_01_ciphertext.txt")
estimated_key = exploit(ciphertext, key_length)
print("Clé estimée:", estimated_key)

decrypted_text = vigenere_decrypt(ciphertext, estimated_key)
print("Texte déchiffré avec la clé estimée:", decrypted_text)
